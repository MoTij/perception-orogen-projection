name "projection"
import_types_from "projectionTypes.hpp"

using_library "frame_helper"
using_library "projection"
import_types_from "base"
import_types_from "frame_helper/Calibration.h"

using_library "fisheye"
import_types_from "fisheye/Calibration.hpp"


import_types_from "projection/OmnidirectionalConfig.hpp"

# Planar reprojection task for omnicam input images
task_context "OmnicamPlanar" do
    needs_configuration

    property("omnicam_calibration", "/projection/omnicam/Model").
	doc "calibration parameters for the omnidirection camera model"

    property("width", "/int", 640).
    	doc "width of the virtual view"

    property("height", "/int", 480).
    	doc "height of the virtual view"

    input_port("view_config", "/projection/omnicam/PlanarViewConfiguration").
	doc "Parameters of the planar view"

    input_port("omnicam", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    output_port("planar_view", ro_ptr("/base/samples/frame/Frame")).
	doc 'resulting planar view image'

    port_driven "omnicam", "view_config"
end

task_context "OmnicamEquirectangular" do
    needs_configuration

    property("omnicam_calibration", "/projection/omnicam/Model").
	doc "calibration parameters for the omnidirection camera model"

    property("width", "/int", 640).
    	doc "width of the virtual view"

    input_port("omnicam", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    output_port("view", ro_ptr("/base/samples/frame/Frame")).
	doc 'resulting planar view image'

    port_driven "omnicam"
end


task_context "Triangulation" do
    needs_configuration
    
    property("extrinsic_calibration", "/frame_helper/ExtrinsicCalibration").
        doc "extrinsic calibration between cam1 and cam2"

    input_port("cam1_point", "/base/Vector2d").
        doc "projected point in camera1"

    input_port("cam2_point", "/base/Vector2d").
        doc "projected point in camera2"

    output_port("scene_point", "/base/Vector3d").
        doc "resulting scene point"

    output_port("error", "/double").
        doc "ray alignment error for the scene point"

    transformer do
	max_latency( 0.2 )

	transformation("base", "cam1")	
    end

    port_driven
end

task_context "ColorizePointcloud" do
    needs_configuration

    property("output_ply", "/std/string", "").
        doc "resulting ply file"

    property("pc2Cam", "base::Matrix4d")
        doc "Matrix, to convert the pointcloud into the camera view"

    property("doUndistortion", "bool", true)
        doc "Matrix, to convert the pointcloud into the camera view"

    input_port("points", "/base/samples/Pointcloud" ).
        doc 'input pointcloud'

    input_port("camera", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    output_port("colored_points", "/base/samples/Pointcloud").
        doc 'output pointcloud'

    stream_aligner do
        max_latency( 0.2 )

        align_port("camera", 0) 
        align_port("points", 0) 
    end

    port_driven
end

task_context "ColorizePointcloudMultiCam" do
    needs_configuration

    property("pc2Cam1", "base::Matrix4d")
        doc "Matrix, to convert the pointcloud into the camera view"

    property("pc2Cam2", "base::Matrix4d")
        doc "Matrix, to convert the pointcloud into the camera view"

    property("doUndistortion", "bool", true)
        doc "Matrix, to convert the pointcloud into the camera view"

    input_port("points", "/base/samples/Pointcloud" ).
        doc 'input pointcloud'

    input_port("camera1", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    input_port("camera2", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    output_port("colored_points", "/base/samples/Pointcloud").
        doc 'output pointcloud'

    stream_aligner do
        max_latency( 0.2 )

        align_port("camera1", 0) 
        align_port("camera2", 0) 
        align_port("points", 0) 
    end

    port_driven
end

task_context "DepthMapToImage" do
    needs_configuration

    property("angular_resolution", "double", 160.0)
        .doc "angular resolution in pixels per radian"
    property("depth_color_cycle", "double", 10.0)
        .doc "if positive, visualize depth by hue"
    property("point_size", "double", 1.0)
    input_port("depth_map", "base::samples::DepthMap")
    output_port("image", ro_ptr('base::samples::frame::Frame'))

    port_driven "depth_map"
end

task_context "ColorizePointcloudMultiFishEyeCam" do
    needs_configuration

    property("cylinderCalibration", "/fisheye/CylinderCamCalibration")

    property("pc2Cam1", "base::Pose").
        doc "Pose, to convert the pointcloud into the camera view"

    property("pc2Cam2", "base::Pose").
        doc "Pose, to convert the pointcloud into the camera view"

#    input_port("points", "/base/samples/Pointcloud" ).
#        doc 'input pointcloud'

    input_port("depthMap", "/base/samples/DepthMap" ).
        doc 'input depth map'

    output_port("depthMap_out", "/base/samples/DepthMap" ).
        doc 'passthrough depth map'

    input_port("camera1", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    input_port("camera2", ro_ptr("/base/samples/frame/Frame")).
        doc 'camera image that is projected into the input pointcloud'

    output_port("camera1_out", ro_ptr("/base/samples/frame/Frame")).
        doc 'passthrough camera image'

    output_port("camera2_out", ro_ptr("/base/samples/frame/Frame")).
        doc 'passthrough camera image'

    output_port("colored_points", "/base/samples/Pointcloud").
        doc 'output pointcloud'

    stream_aligner do
        max_latency( 500.0 )

        align_port("camera1", 0.05)
        align_port("camera2", 0.05)
        align_port("depthMap", 0.2)
    end

    port_driven
end

task_context "VirtualView" do
    needs_configuration

    # width of the virtual view
    property "width", "/int", 512
    # height of the virtual view
    property "height", "/int", 512
    # focal length
    property "focal_length", "/int", 250

    # Dynamic input port declaration for the images
    input_port "cam1", ro_ptr("/base/samples/frame/Frame")
    input_port "cam2", ro_ptr("/base/samples/frame/Frame")
    input_port "cam3", ro_ptr("/base/samples/frame/Frame")
    input_port "cam4", ro_ptr("/base/samples/frame/Frame")

    # the image for the virtual view
    output_port "virtual_cam", ro_ptr("/base/samples/frame/Frame")

    transformer do
	max_latency( 0.2 )

	transformation("virtual_cam", "plane")	
	transformation("cam1", "plane")
	transformation("cam2", "plane")
	transformation("cam3", "plane")
	transformation("cam4", "plane")

	align_port("cam1") 
	align_port("cam2") 
	align_port("cam3") 
	align_port("cam4") 
    end

    periodic 0.1
end

