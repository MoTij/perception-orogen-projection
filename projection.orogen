name "projection"
import_types_from "projectionTypes.hpp"

using_library "frame_helper"
using_library "projection"
import_types_from "base"
import_types_from "frame_helper/Calibration.h"

task_context "Triangulation" do
    needs_configuration
    
    property("extrinsic_calibration", "/frame_helper/ExtrinsicCalibration").
        doc "extrinsic calibration between cam1 and cam2"

    input_port("cam1_point", "/base/Vector2d").
        doc "projected point in camera1"

    input_port("cam2_point", "/base/Vector2d").
        doc "projected point in camera2"

    output_port("scene_point", "/base/Vector3d").
        doc "resulting scene point"

    transformer do
	max_latency( 0.2 )

	transformation("base", "cam1")	
    end

    port_driven
end

task_context "ColorizePointcloud" do
    needs_configuration

    property("output_ply", "/std/string", "").
	doc "resulting ply file"

    input_port("points", "/base/samples/Pointcloud" ).
	doc 'input pointcloud'

    input_port("camera", ro_ptr("/base/samples/frame/Frame")).
	doc 'camera image that is projected into the input pointcloud'

    output_port("colored_points", "/base/samples/Pointcloud").
	doc 'output pointcloud'

    transformer do
	max_latency( 0.2 )

	transformation("pointcloud", "camera")	

	align_port("camera") 
	align_port("points") 
    end

    port_driven
end

task_context "VirtualView" do
    needs_configuration

    # width of the virtual view
    property "width", "/int", 512
    # height of the virtual view
    property "height", "/int", 512
    # focal length
    property "focal_length", "/int", 250

    # Dynamic input port declaration for the images
    input_port "cam1", ro_ptr("/base/samples/frame/Frame")
    input_port "cam2", ro_ptr("/base/samples/frame/Frame")
    input_port "cam3", ro_ptr("/base/samples/frame/Frame")
    input_port "cam4", ro_ptr("/base/samples/frame/Frame")

    # the image for the virtual view
    output_port "virtual_cam", ro_ptr("/base/samples/frame/Frame")

    transformer do
	max_latency( 0.2 )

	transformation("virtual_cam", "plane")	
	transformation("cam1", "plane")
	transformation("cam2", "plane")
	transformation("cam3", "plane")
	transformation("cam4", "plane")

	align_port("cam1") 
	align_port("cam2") 
	align_port("cam3") 
	align_port("cam4") 
    end

    periodic 0.1
end

